<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no"
    />
    <title>Map-toy-project</title>
    <link rel="stylesheet" href="/stylesheets/style.css" />
    <script
      type="text/javascript"
      src="https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId= /// MY API ID /// "
    ></script>
    <script
      type="text/javascript"
      src="//dapi.kakao.com/v2/maps/sdk.js?appkey= /// MY API ID /// &libraries=services"
    ></script>
  </head>

  <body>
    <div id="nav">Map-toy-project</div>
    <div id="search">
      <input
        type="search"
        id="search_input"
        placeholder="목적지를 입력해 주세요"
      />
      <button id="search_button">찾기</button>
    </div>
    <div id="current">현재위치 찾기</div>
    <div id="clock">
      <h1></h1>
    </div>

    <div id="map" style="width: 100%; height: 100vh"></div>

    <script type="text/javascript" src="/data/data.js"></script>
    <script>
      const mapOptions = {
        center: new naver.maps.LatLng(37.3595704, 127.105399),
        zoom: 15,
        zoomControl: true,
        zoomControlOptions: {
          position: naver.maps.Position.TOP_RIGHT,
          legendDisabled: false,
        },
      };
      const map = new naver.maps.Map("map", mapOptions);
      const ps = new kakao.maps.services.Places();
      const currentPosition = document.getElementById("current");
      const searchInput = document.getElementById("search_input");
      const searchButton = document.getElementById("search_button");
      const clockContainer = document.getElementById("clock");
      const clockText = clockContainer.querySelector("h1");
      const markerList = [];
      const infoWindowList = [];
      const searchErr = [];
      let currentUse = true;

      for (let i in data) {
        const target = data[i];
        const latlng = new naver.maps.LatLng(target.lat, target.lng);

        marker = new naver.maps.Marker({
          map: map,
          position: latlng,
          icon: {
            content: "<div class = 'marker'></div>",
            anchor: new naver.maps.Point(12, 12),
          },
        });

        const content = `<div class='infoWindow_wrap'>
            <div class='infoWindow_header'>
              <div class='infoWindow_title'>${target.title}</div>
              <div class='infoWindow_content'>${target.content}</div>
            </div>

            <div class='infoWindow_date'>${target.date}</div>
          </div>`;

        const infoWindow = new naver.maps.InfoWindow({
          content: content,
          backgroundColor: "#00ff0000",
          borderColor: "#00ff0000",
          anchorSize: new naver.maps.Size(10, 10),
          anchorColor: "rgba(0,0,0,0.5)",
        });

        markerList.push(marker);
        infoWindowList.push(infoWindow);
      }

      getClickHandler = (i) => {
        return () => {
          const marker = markerList[i];
          const infoWindow = infoWindowList[i];

          if (infoWindow.getMap()) {
            infoWindow.close();
          } else {
            infoWindow.open(map, marker);
          }
        };
      };

      clickMap = (i) => {
        return () => {
          const infoWindow = infoWindowList[i];
          infoWindow.close();
        };
      };

      changeColor = () => {
        currentPosition.style.backgroundColor = `rgb(${32}, ${41}, ${160})`;
        currentPosition.innerText = "현재위치 표시중";
        currentPosition.style.color = "white";
      };

      handleCurrentPosition = () => {
        if ("geolocation" in navigator) {
          navigator.geolocation.getCurrentPosition((position) => {
            const lat = position.coords.latitude;
            const lng = position.coords.longitude;
            const latlng = new naver.maps.LatLng(lat, lng);

            if (currentUse) {
              marker = new naver.maps.Marker({
                map: map,
                position: latlng,
                icon: {
                  content:
                    '<div class="pulse" draggable="false" unselectable="on"></div>',

                  anchor: new naver.maps.Point(11, 11),
                },
              });
              currentUse = false;
            }
            map.setZoom(15, false);
            map.panTo(latlng);

            changeColor();
          });
        } else {
          alert("위치정보 사용 불가능");
        }
      };

      placeSearchCB = (data, status, pagination) => {
        if (status === kakao.maps.services.Status.OK) {
          const target = data[0];
          const lat = target.y;
          const lng = target.x;
          const latlng = new naver.maps.LatLng(lat, lng);

          marker = new naver.maps.Marker({
            position: latlng,
            map: map,
          });

          if (searchErr.length == 0) {
            searchErr.push(marker);
          } else {
            searchErr.push(marker);

            const preMarker = searchErr.splice(0, 1);
            preMarker[0].setMap(null);
          }

          map.setZoom(15, false);
          map.panTo(latlng);
        } else {
          alert("검색 결과가 없습니다");
        }
      };

      srchKeywordEnter = (e) => {
        if (e.keyCode == 13) {
          const content = searchInput.value;
          ps.keywordSearch(content, placeSearchCB);
        }
      };

      srchKeywordButton = () => {
        const content = searchInput.value;
        ps.keywordSearch(content, placeSearchCB);
      };

      getTime = () => {
        const date = new Date();
        const month = date.getMonth();
        const days = date.getDate();
        const hours = date.getHours();
        const minutes = date.getMinutes();
        const seconds = date.getSeconds();

        clockText.innerText = `${month + 1}월 ${days <= 9 ? `0${days}` : days}일
        ${hours <= 9 ? `0${hours}` : hours} : ${
          minutes <= 9 ? `0${minutes}` : minutes
        } : ${seconds <= 9 ? `0${seconds}` : seconds}`;
      };

      showClock = () => {
        getTime();
        setInterval(getTime, 1000);
      };

      for (var i = 0, ii = markerList.length; i < ii; i++) {
        naver.maps.Event.addListener(
          markerList[i],
          "click",
          getClickHandler(i)
        );

        naver.maps.Event.addListener(map, "click", clickMap(i));
      }

      currentPosition.addEventListener("click", handleCurrentPosition);
      searchInput.addEventListener("keydown", srchKeywordEnter);
      searchButton.addEventListener("click", srchKeywordButton);

      showClock();
    </script>
  </body>
</html>
